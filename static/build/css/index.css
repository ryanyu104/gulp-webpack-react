.center-block {
  width: 1100px;
  margin: 0 auto;
  text-align: center;
  zoom: 1;
}
.center-block:before,
.center-block:after {
  content: "";
  display: table;
}
.center-block:after {
  clear: both;
}
.center-block h2 {
  font-size: 5vw;
}
.center-block div {
  background: #fff;
  color: #f00;
  zoom: 1;
}
.center-block div:before,
.center-block div:after {
  content: "";
  display: table;
}
.center-block div:after {
  clear: both;
}
.center-block p {
  *zoom: 1;
  float: left;
  clear: none;
  text-align: inherit;
  width: 33.33333333333333%;
  margin-left: 0%;
  margin-right: 0%;
  line-height: 1.8;
  background: -webkit-linear-gradient(top, #fff, #000);
  background: -moz-linear-gradient(top, #fff, #000);
  background: -o-linear-gradient(top, #fff, #000);
  background: -ms-linear-gradient(top, #fff, #000);
  background: linear-gradient(to bottom, #fff, #000);
}
.center-block p:before,
.center-block p:after {
  content: '';
  display: table;
}
.center-block p:after {
  clear: both;
}
.center-block img {
  width: 400px;
  display: inline-block;
}
.center-block .img-box {
  width: 300px;
  height: 267px;
  -webkit-border-radius: 100px;
  border-radius: 100px;
  display: inline-block;
  background: url("/static/build/img/about.jpg");
  -webkit-background-size: cover;
  -moz-background-size: cover;
  background-size: cover;
  -webkit-transform: rotate(7deg);
  -moz-transform: rotate(7deg);
  -o-transform: rotate(7deg);
  -ms-transform: rotate(7deg);
  transform: rotate(7deg);
}

/*# sourceMappingURL=data:application/json;base64, */
